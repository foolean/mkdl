#!/bin/bash
#
# Filename:     mkdl.debian (diskless utility)
# Author:       Bennett Samowich <bennett@foolean.org>
# Date:         2014-08-22
#
# Description:
#   mkdl.debian is a simle bash script to generate a diskless Debian image
#   The image is bootable and does not require NFS for any filesystems.
#
# Dependencies:
#   debootstrap - the main utility used to build the inital image
#   lsb-release - the lsb-release utility is used to get the current 
#                 operating system codename.
# License:
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Puplic License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program. If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

# verbose - helper routine to print verbose messages
verbose() {
    if [ "${VERBOSE}" -ge 1 ]; then
        echo "$*"
    fi
}

# debug - helper routine to print debugging messages
debug() {
    if [ "${DEBUG}" -eq 1 ]; then
        echo "debug: $*"
    fi
}

# fatal - helper function to print an error message and exit
fatal() {
    echo "fatal: $*"
    exit 1
}

# Simple usage subroutine
usage() {
    cat << EOF
usage: $(basename $0) [OPTIONS]

Where:
    -a [ARCH]     - Architecture to build an image for
    -c            - Chroot into the image after building it
                    (useful for last-minute changes before packing)
    -d            - Print additional debugging messages
    -h            - Print this message and exit
    -i [FILE]     - File with the list of additional packages to add
    -O [PATH]     - Path to place the output files in
    -p [PASSWD]   - Password to use for the root account in the image
    -r [RELEASE]  - Operating system release to build
    -v            - Print more verbose output
EOF
    exit 1
}

# Set variables to their defaults
DEBUG=0
VERBOSE=0
CHROOT=0
PKGSFILE=""
OS=$(lsb_release -is | tr 'A-Z' 'a-z')
RELEASE=$(lsb_release -rs)
ARCH=$(uname -m)
if [ "${ARCH}" == "x86_64" ]; then
    case ${OS} in
        debian)
            ARCH="amd64"
            ;;
    esac
fi
PASSWD="diskless"
OUTROOT="$(readlink -f ~/mkdlbuild)"
PACKAGES="firmware-linux-free,lsb-release,etckeeper,linux-image-${ARCH},locales,puppet,coreutils,less,openssh-client,lvm2"

# Parse the command-line options
while getopts "a:cdhi:O:p:r:v" OPTION
do
    case $OPTION in
        a)
            ARCH=${OPTARG}
            ;;
        c)
            CHROOT=1
            ;;
        d)
            DEBUG=1
            ;;
        h)
            usage
            exit 1
            ;;
        i)
            PKGSFILE=${OPTARG}
            ;;
#        o)
#            OS=${OS}
#            ;;
        O)
            OUTROOT=${OPTARG}
            ;;
        p)
            PASSWD=${OPTARG}
            ;;
        r)
            RELEASE=${OPTARG}
            ;;
        v)
            VERBOSE=$((VERBOSE + 1))
            ;;
        ?)
            usage
            exit 1
            ;;
    esac
done

IMAGE="diskless-${OS}-${RELEASE}-${ARCH}.img"
PXEDIR="$(readlink -f ${OUTROOT})/pxe/${OS}/${RELEASE}/${ARCH}"
IMGDIR="$(readlink -f ${OUTROOT})/rootfs/${OS}/${RELEASE}/${ARCH}"
SHA512_SALT=$(openssl rand 128 | tr -dc "A-Za-z0-9" | head -c 16)
ENCRYPTED_PASSWD=$(perl -e 'print crypt("'${PASSWD}'", "\$6\$'${SHA512_SALT}'\$")')

# Print out the variables for debugging
debug "OS                 = '${OS}'"
debug "RELEASE            = '${RELEASE}'"
debug "ARCH               = '${ARCH}'"
debug "PASSWD             = '${PASSWD}'"
debug "SHA512_SALT        = '${SHA512_SALT}'"
debug "ENCRYPTED_PASSWD   = '${ENCRYPTED_PASSWD}'"
debug "OUTROOT            = '${OUTROOT}'"
debug "CHROOT             = '${CHROOT}'"
debug "DEBUG              = '${DEBUG}'"
debug "PKGSFILE           = '${PKGSFILE}'"
debug "IMAGE              = '${IMAGE}'"
debug "IMGDIR             = '${IMGDIR}'"
debug "PXEDIR             = '${PXEDIR}'"
debug "PACKAGES           = '${PACKAGES}'"

# Make sure that we're on the correct OS
if [ "${OS}" != "debian" ]; then
    fatal "Unable to build Debian image on ${OS}"
    exit 1; # should never get here
fi

# Make sure that IMGDIR exists
if [ ! -d "${IMGDIR}" ]; then
    verbose "Creating '${IMGDIR}'"
    mkdir -p "${IMGDIR}"
fi

# Make sure that PXEDIR exists
if [ ! -d "${PXEDIR}" ]; then
    verbose "Creating '${PXEDIR}'"
    mkdir -p "${PXEDIR}"
fi

# We must have debootstrap for any of this to work
HAVE_DEBOOTSTRAP=$(dpkg -l debootstrap | grep -c "^ii debootstrap")
if [ ! ${HAVE_DEBOOTSTRAP} ]; then
    echo "Installing debootstrap"
    apt-get update
    apt-get install debootstrap
fi

HAVE_WHOIS=$(dpkg -l whois | grep -c "^ii whois")
if [ ! ${HAVE_WHOIS} ]; then
    echo "Installing whois"
    apt-get update
    apt-get install whois
fi

# Make sure the working directory exists
if [ ! -d "${IMGDIR}" ]; then
    echo "Creating ${IMGDIR}"
    mkdir "${IMGDIR}"
fi

# Build the image directory.  We'll use the precense of
# /boot/vmlinuz-*-${ARCH} within the image directory to
# determine if this process has already been run
if [ ! -f "${IMGDIR}/boot/vmlinuz-"*"-${ARCH}" ]; then
    echo "Building the image in ${IMGDIR}"
    /usr/sbin/debootstrap       \
        --arch "${ARCH}"        \
        --include "${PACKAGES}" \
        ${RELEASE} ${IMGDIR}
fi

# Copy in the TTY devices.
# NOTE: It may be better to just use mknod
for TTY in /dev/tty[1-6]; do
    if [ ! -e "${IMGDIR}${TTY}" ]; then
        echo "Copying in ${TTY}"
        cp -a "${TTY}" "${IMGDIR}/dev/"
    fi
done

# Copy in disk devices
for DISK in /dev/sd*; do
    if [ ! -e "${IMGDIR}${DISK}" ]; then
        echo "Copying in ${DISK}"
        cp -a "${DISK}" "${IMGDIR}/dev/"
    fi
done

# Set the locales
if [ $(egrep -v "^#|^$" "${IMGDIR}/etc/locale.gen"  | wc -l) -eq 0 ]; then
#    chroot "${IMGDIR}"/ apt-get -y --force-yes install locales
    cat >> "${IMGDIR}/etc/locale.gen" << EOF
en_US ISO-8859-1
en_US.ISO-8859-15 ISO-8859-15
en_US.UTF-8 UTF-8
EOF
    chroot "${IMGDIR}"/ locale-gen
    chroot "${IMGDIR}"/ etckeeper commit "set locales"
fi

# Set the initial hostname to 'diskless'
if [ "$(cat ${IMGDIR}/etc/hostname)" != "diskless" ]; then
    echo "Setting /etc/hostname"
    echo "diskless" > "${IMGDIR}/etc/hostname"
    chroot "${IMGDIR}"/ etckeeper commit "set /etc/hostname"
fi

# Make sure that eth0 is defined
if [ $(grep -c "eth0" "${IMGDIR}/etc/network/interfaces") -eq 0 ]; then
    echo "Setting /etc/network/interfaces"
    cat >> "${IMGDIR}/etc/network/interfaces" << EOF

auto eth0
iface eth0 inet dhcp
EOF
    chroot "${IMGDIR}"/ etckeeper commit "set /etc/network/interfaces"
fi

# Set the root password
if [ $(grep -c "root.*${ENCRYPTED_PASSWD}" "${IMGDIR}/etc/shadow") -eq 0 ]; then
    chroot "${IMGDIR}"/ usermod -p "${ENCRYPTED_PASSWD}" root
    chroot "${IMGDIR}"/ chage -d 0 root
    chroot "${IMGDIR}"/ etckeeper commit "set root password and force change at first login" 
fi

# Copy in the init script
if [ ! -f "${IMGDIR}/init" ]; then
    echo "Copying in diskless init script"
    cp diskless-init "${IMGDIR}/init"
    chown root.root "${IMGDIR}/init"
    chmod 0755 "${IMGDIR}/init"
fi

echo "Populating /etc/fstab"
cat > "${IMGDIR}/etc/fstab" << EOF
# /etc/fstab: static file system information.
/dev/root  / ${FSTYPE} defaults 0 0
#none      /                 tmpfs   defaults                    0 0
devpts    /dev/pts          devpts  defaults                    0 0
proc      /proc             proc    defaults                    0 0
sys       /sys              sysfs   defaults                    0 0
tmpfs     /run              tmpfs   nosuid,size=10%,mode=755    0 0
tmpfs     /etc/network/run  tmpfs   defaults,noatime            0 0
tmpfs     /home             tmpfs   defaults                    0 0
tmpfs     /tmp              tmpfs   defaults,noatime            0 0
tmpfs     /var/lock         tmpfs   defaults,noatime            0 0
tmpfs     /var/log          tmpfs   defaults,noatime            0 0
tmpfs     /var/mail         tmpfs   defaults,noatime            0 0
tmpfs     /var/spool/cron   tmpfs   defaults,noatime            0 0
tmpfs     /var/tmp          tmpfs   defaults,noatime            0 0
EOF

# Chroot into the image for any last minute fixups
if [ ${CHROOT} -gt 0 ]; then
    echo "Chrooting into ${IMGDIR}"
    chroot "${IMGDIR}"/ /bin/su -
fi

# Make sure the output directory exists
if [ ! -d "${PXEDIR}" ]; then
    echo "Creating ${PXEDIR}"
    mkdir -p "${PXEDIR}"
fi

# Grab a copy of vmlinuz
echo "Grabbing vmlinuz"
cp "${IMGDIR}/boot/vmlinuz-"*"-${ARCH}" "${PXEDIR}/vmlinuz"

# Create image from directory
echo "Packing image"
cd "${IMGDIR}"
find . -print0 | cpio -0 -H newc -o | gzip -c > "${PXEDIR}/${IMAGE}"

# Create a helper file with the pxe configuration
echo "Creating PXE config"
MIN_SIZE=$(( $(du -s "${IMGDIR}" | awk '{print $1}') + 256000 ))
cat > "${PXEDIR}/pxe.cfg" << EOF
# This is an example config for PXE booting the diskless image
LABEL diskless
    MENU LABEL Diskless ${OS} ${RELEASE} ${ARCH} image
    KERNEL \$TFTP_PATH_TO/vmlinuz
    APPEND initrd=\$TFTP_PATH_TO/diskless-${OS}-${RELEASE}-${ARCH}.img root=/dev/ram0 ramdisk_size=\$GREATER_THAN_${MIN_SIZE}
    TEXT HELP
    ${OS} ${RELEASE} ${ARCH} diskless image
    ENDTEXT
EOF

echo "Done"

